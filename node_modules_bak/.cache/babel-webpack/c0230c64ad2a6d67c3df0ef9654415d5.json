{"ast":null,"code":"import { c as componentOnReady } from './helpers-dd7e4b7b.js';\n\nconst attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n\n  const el = typeof component === 'string' ? container.ownerDocument && container.ownerDocument.createElement(component) : component;\n\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n\n  container.appendChild(el);\n  await new Promise(resolve => componentOnReady(el, resolve));\n  return el;\n};\n\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n\n    element.remove();\n  }\n\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };","map":null,"metadata":{},"sourceType":"module"}